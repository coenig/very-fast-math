{
   "#TEMPLATE": {
      "#01": "@f(nan) { 0/0 }",
      "#03": "@f(single, x, y) { x = array(2); get(x) = y; get(x) + 1 = nan() }",
      "#04": "@f(range, x, a, b) { x = array(b - a + 2); @i = get(x); while(i - get(x) < b - a + 1) { i = a + i - get(x); @i = i + 1 }; i = nan() }",
      "#05": "@f(range_dist, x, a, b, c) { x = array((b - a) / c + 1 ); @i = get(x); while(i - get(x) < (b - a) / c + 1) { i = a + (i - get(x)) * c; @i = i +1}; i = nan() }",
      "#06": "@f(range_mult, x, start, cnt, mult) { x = array(cnt + 1); @i = get(x); @val = start; while(i < get(x) + cnt) { i = val; @i = i + 1; @val = val * mult }; i = nan() }",
      "#07": "range(@nonegos, 2, 2);",
      "#08": "range(@lanes, 4, 4);",
      "#09": "range(@segments, 1, 1);",
      "#10": "range_mult(@d, 1000, 1, 2);",
      "#11": "range_mult(@t, 500, 3, 2);",
      "#12": "@distscaling = array(3); @distscaling[0] = 8000; @distscaling[1] = 25000; @distscaling[2] = nan();",
      "#13": "x[0] * y[3]",
      "#14": "range_mult(@gran, 10, 4, 2);",
      "#15": "range(@sections, 3, 3);",
      "#21": "@f(LaneAvailableLeft) { distance_front } { env.ego.gaps___609___.lane_availability > distance_front }",
      "#22": "@f(LaneAvailableLeft) {} { LaneAvailableLeft(0) }",
      "#23": "@f(LaneAvailableRight) { distance_front } { env.ego.gaps___629___.lane_availability > distance_front }",
      "#24": "@f(LaneAvailableRight) {} { LaneAvailableRight(0) }",
      "#25": "@f(LaneAvailableLeftRight) { distance_front } { LaneAvailableLeft(distance_front) && LaneAvailableRight(distance_front) }",
      "#26": "@f(LaneAvailableLeftRight) {} { LaneAvailableLeftRight(0) }",
      "#27": "@f(GapLeft) { distance_front, distance_rear } { (env.ego.gaps___609___.s_dist_front > distance_front) && (env.ego.gaps___609___.s_dist_rear > distance_rear) }",
      "#28": "@f(GapLeft) {} { GapLeft(20, 20) }",
      "#29": "@f(GapRight) { distance_front, distance_rear } { (env.ego.gaps___629___.s_dist_front > distance_front) && (env.ego.gaps___629___.s_dist_rear > distance_rear) }",
      "#30": "@f(GapRight) {  } { GapRight(20, 20) }",
      "#31": "@f(GapLeftRight) { distance_front, distance_rear } { GapLeft(distance_front, distance_rear) && GapRight(distance_front, distance_rear) }",
      "#32": "@f(GapLeftRight) {} { GapLeftRight(20, 20) }",
      "#33": "@f(LCReadyLeftRight) {  } { LaneAvailableLeftRight() && GapLeftRight() }",
      "#34": "@f(LCTowardsEgoAhead) { from_dir, nonego_id } { (env.ego.gaps[from_dir].i_agent_front == nonego_id) && env.veh[nonego_id].lane_single && env.ego_lane_1 && F(env.ego_lane_1 && env.veh[nonego_id].lane_single && (env.ego.gaps[1].i_agent_front == nonego_id)) }",
      "#35": "@f(Crash) {  } { env.crash }",
      "#36": "@f(BlamableCrash) {  } { env.blamable_crash }",
      "#37": "@f(SetSpeedFromTo) { start_speed, end_speed } { (env.ego.v == start_speed) && F((env.ego.v == end_speed)) }",
      "#38": "@f(SetSpeedCurve) { start_speed, mid_speed, end_speed } { SetSpeedFromTo(start_speed, mid_speed) && F(SetSpeedFromTo(mid_speed, end_speed)) }",
      "#39": "@f(GapLeftMinMax) { distance_front_min, distance_front_max, distance_rear_min, distance_rear_max } { (env.ego.gaps___609___.s_dist_front > distance_front_min) && (env.ego.gaps___609___.s_dist_rear > distance_rear_min) && (env.ego.gaps___609___.s_dist_front < distance_front_max) && (env.ego.gaps___609___.s_dist_rear < distance_rear_max) }",
      "ABORTREVOKE": false,
      "ANGLEGRANULARITY": "#{90}#",
      "BMC_CNT": 100,
      "BMC_NUMBER_OF_CEXS": 1,
      "BRAKEINHIBITION": false,
      "CALCULATE_RIGHT_GAP_REAR": false,
      "DEBUG": false,
      "DISTANCESCALING": "#{1000}#",
      "DOUBLEMERGEPROTECTION": false,
      "FARMERGINGCARS": false,
      "FEASIBILITY": false,
      "HARDBRAKEPREVENTION": -8,
      "KEEP_EGO_FROM_GREEN": true,
      "LTL_MODE": false,
      "MAXDISTCONNECTIONS": "#{30}#",
      "MAXOUTGOINGCONNECTIONS": "#{2}#",
      "MINDISTCONNECTIONS": "#{30}#",
      "NONEGOS": "#{nonegos}#",
      "NUMLANES": "#{lanes}#",
      "SECTIONS": "#{sections}#",
      "SECTIONSMAXLENGTH": "#{200}#",
      "SECTIONSMINLENGTH": "#{50}#",
      "SEGMENTS": "#{segments}#",
      "SEGMENTSMINLENGTH": 0,
      "SPEC": "#{ env.ego.v >= 5 || (env.veh___609___.is_on_sec_0 == 1) || (env.veh___609___.abs_pos < 50) }#",
      "ShowLOG": true,
      "TIMESCALING": "#{1000}#",
      "_BP_INCLUDES_FILE_PATH": "../src/examples/ego_less/vfm-includes.txt",
      "_CACHED_PATH": "../examples/tmp",
      "_GENERATED_PATH": "../examples/gp"
   }
}