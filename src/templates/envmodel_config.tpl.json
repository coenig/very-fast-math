{
   "#TEMPLATE": {
      "#001": "@f(nan) { 0/0 }",
      "#003": "@f(single, x, y) { x = array(2); get(x) = y; get(x) + 1 = nan() }",
      "#004": "@f(range, x, a, b) { x = array(b - a + 2); @i = get(x); while(i - get(x) < b - a + 1) { i = a + i - get(x); @i = i + 1 }; i = nan() }",
      "#005": "@f(range_dist, x, a, b, c) { x = array((b - a) / c + 1 ); @i = get(x); while(i - get(x) < (b - a) / c + 1) { i = a + (i - get(x)) * c; @i = i +1}; i = nan() }",
      "#006": "@f(range_mult, x, start, cnt, mult) { x = array(cnt + 1); @i = get(x); @val = start; while(i < get(x) + cnt) { i = val; @i = i + 1; @val = val * mult }; i = nan() }",
      "#007": "range(@nonegos, 3, 3);",
      "#008": "range(@lanes, 3, 3);",
      "#009": "range(@segments, 2, 2);",
      "#010": "range(@sections, 3, 3);",
      "#011": "range(@maxdist, 40, 40);",
      "#012": "range(@anglegran, 45, 45);",
      "#013": "range(@vehlen, 5, 5);",
      "#014": "range(@minaccelego, -2, -2);",
      "#015": "range(@minaccel, -8, -8);",
      "#016": "range(@maxaccel, 3, 3);",
      "#017": "range_mult(@d, 1000, 1, 2);",
      "#018": "range_mult(@t, 500, 3, 2);",
      "#019": "@distscaling = array(3); @distscaling[0] = 8000; @distscaling[1] = 25000; @distscaling[2] = nan();",
      "#020": "range_mult(@gran, 10, 4, 2);",
      "#121": "@f(LaneAvailableLeft) { distance_front } { env.ego.gaps___609___.lane_availability > distance_front }",
      "#122": "@f(LaneAvailableLeft) {} { LaneAvailableLeft(0) }",
      "#123": "@f(LaneAvailableRight) { distance_front } { env.ego.gaps___629___.lane_availability > distance_front }",
      "#124": "@f(LaneAvailableRight) {} { LaneAvailableRight(0) }",
      "#125": "@f(LaneAvailableLeftRight) { distance_front } { LaneAvailableLeft(distance_front) && LaneAvailableRight(distance_front) }",
      "#126": "@f(LaneAvailableLeftRight) {} { LaneAvailableLeftRight(0) }",
      "#127": "@f(GapLeft) { distance_front, distance_rear } { (env.ego.gaps___609___.s_dist_front > distance_front) && (env.ego.gaps___609___.s_dist_rear > distance_rear) }",
      "#128": "@f(GapLeft) {} { GapLeft(20, 20) }",
      "#129": "@f(GapRight) { distance_front, distance_rear } { (env.ego.gaps___629___.s_dist_front > distance_front) && (env.ego.gaps___629___.s_dist_rear > distance_rear) }",
      "#130": "@f(GapRight) {  } { GapRight(20, 20) }",
      "#131": "@f(GapLeftRight) { distance_front, distance_rear } { GapLeft(distance_front, distance_rear) && GapRight(distance_front, distance_rear) }",
      "#132": "@f(GapLeftRight) {} { GapLeftRight(20, 20) }",
      "#133": "@f(LCReadyLeftRight) {  } { LaneAvailableLeftRight() && GapLeftRight() }",
      "#134": "@f(LCTowardsEgoAhead) { from_dir, nonego_id } { (env.ego.gaps[from_dir].i_agent_front == nonego_id) && env.veh[nonego_id].lane_single && env.ego_lane_1 && F(env.ego_lane_1 && env.veh[nonego_id].lane_single && (env.ego.gaps[1].i_agent_front == nonego_id)) }",
      "#135": "@f(Crash) {  } { env.crash }",
      "#136": "@f(BlamableCrash) {  } { env.blamable_crash }",
      "#137": "@f(SetSpeedFromTo) { start_speed, end_speed } { (env.ego.v == start_speed) && F((env.ego.v == end_speed)) }",
      "#138": "@f(SetSpeedCurve) { start_speed, mid_speed, end_speed } { SetSpeedFromTo(start_speed, mid_speed) && F(SetSpeedFromTo(mid_speed, end_speed)) }",
      "#139": "@f(GapLeftMinMax) { distance_front_min, distance_front_max, distance_rear_min, distance_rear_max } { (env.ego.gaps___609___.s_dist_front > distance_front_min) && (env.ego.gaps___609___.s_dist_rear > distance_rear_min) && (env.ego.gaps___609___.s_dist_front < distance_front_max) && (env.ego.gaps___609___.s_dist_rear < distance_rear_max) }",
      "#140": "@f(RLCDist) { delta_v, ego_a } { (env.ego.gaps___609___.v_rear >= env.ego.v + delta_v) && (env.rlc == env.ego.gaps___609___.s_dist_rear) && (env.ego.a == 0-ego_a) }",
      "ALLOW_ZEROLENGTH_SECTIONS": false,
      "ANGLEGRANULARITY": "#{45}#",
      "BMC_CNT": 100,
      "BMC_NUMBER_OF_CEXS": 1,
      "CALCULATE_CENTER_GAP": false,
      "CALCULATE_LEFT_GAP": true,
      "CALCULATE_RIGHT_GAP": false,
      "CALCULATE_RIGHT_GAP_REAR": false,
      "DEBUG": false,
      "DISTANCESCALING": "#{1000}#",
      "EGOLESS": false,
      "FEASIBILITY": false,
      "KEEP_EGO_FROM_GREEN": true,
      "LTL_MODE": false,
      "MAXACCELEGO": 2,
      "MAXACCELNONEGO": "#{maxaccel}#",
      "MAXDISTCONNECTIONS": "#{40}#",
      "MAXOUTGOINGCONNECTIONS": "#{2}#",
      "MINACCELEGO": "#{minaccelego}#",
      "MINACCELNONEGO": "#{minaccel}#",
      "MINDISTCONNECTIONS": "#{35}#",
      "MIN_TIME_BETWEEN_LANECHANGES": 333,
      "NONEGOS": "#{nonegos}#",
      "NUMLANES": "#{lanes}#",
      "SCENGEN_EXISTENTIAL_PROPERTIES": "1-9",
      "SCENGEN_MODE": false,
      "SCENGEN_UNIVERSAL_PROPERTIES": "0-0",
      "SECTIONS": "#{sections}#",
      "SECTIONSMAXLENGTH": "#{50}#",
      "SECTIONSMINLENGTH": "#{20}#",
      "SEGMENTS": "#{segments}#",
      "SEGMENTSMINLENGTH": 35,
      "SIMPLE_LC": true,
      "SPEC": "#{ !((env.veh___619___.on_straight_section == 1) && (env.veh___629___.on_straight_section == 2)) }#",
      "SPEC1": "#{ (F(env.cnt == 1)) }#",
      "SPEC2": "#{ (F(env.cnt == 2)) }#",
      "SPEC3": "#{ (F(env.cnt == 3)) }#",
      "SPEC4": "#{ (F(env.cnt == 5)) }#",
      "SPEC5": "#{ (F(env.cnt == 6)) }#",
      "SPEC6": "#{ (F(env.cnt == 7)) }#",
      "SPEC7": "#{ (F(env.cnt == 8)) }#",
      "SPEC8": "#{ (F(env.cnt == 9)) }#",
      "SPEC9": "#{ (F(env.cnt == 10)) }#",
      "ShowLOG": true,
      "TIMESCALING": "#{1000}#",
      "VEHICLE_LENGTH": "#{vehlen}#",
      "_BP_INCLUDES_FILE_PATH": "../src/examples/ego_less/vfm-includes.txt",
      "_CACHED_PATH": "../examples/tmp",
      "_GENERATED_PATH": "../examples/gp"
   }
}